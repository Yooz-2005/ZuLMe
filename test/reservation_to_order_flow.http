# 预订到订单完整流程测试

@baseUrl = http://localhost:8888
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzQxNzI4MDAsImlhdCI6MTczNDA4NjQwMCwiaXNzIjoiWnVMTWUiLCJzdWIiOiJ1c2VyIiwidXNlcklkIjoxfQ.your-user-token

### ========== 第一步：预订流程 ==========

### 1. 检查车辆可用性（公开接口）
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20"
}

### 2. 获取可用车辆列表（公开接口）
POST {{baseUrl}}/vehicle-inventory/available-vehicles
Content-Type: application/json

{
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "merchant_id": 1
}

### 3. 查看车辆库存日历（公开接口）
GET {{baseUrl}}/vehicle-inventory/calendar?vehicle_id=1&start_date=2024-01-01&end_date=2024-01-31

### 4. 用户创建预订（需要用户认证）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "需要儿童座椅，希望是白色车辆"
}

### ========== 第二步：订单流程 ==========

### 5. 基于预订创建订单（需要用户认证）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "下午3点取车，需要提前准备儿童座椅",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### ========== 第三步：支付后状态更新 ==========

### 6. 模拟支付成功后更新预订状态（系统内部调用）
PUT {{baseUrl}}/vehicle-inventory/reservation/status
Content-Type: application/json

{
  "order_id": 1001,
  "status": "rented"
}

### ========== 商家管理流程 ==========

### 7. 商家查看库存统计
GET {{baseUrl}}/vehicle-inventory/stats
Authorization: Bearer {{merchantToken}}

### 8. 商家查看库存报表
GET {{baseUrl}}/vehicle-inventory/report?merchant_id=1&start_date=2024-01-01&end_date=2024-01-31
Authorization: Bearer {{merchantToken}}

### ========== 错误测试用例 ==========

### 9. 测试重复预订同一车辆同一时间段（应该失败）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "重复预订测试"
}

### 10. 测试无效的预订ID创建订单（应该失败）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 99999,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "无效预订ID测试",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 11. 测试未登录用户创建预订（应该失败）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-25",
  "end_date": "2024-01-30",
  "notes": "未登录测试"
}

### ========== 完整业务场景测试 ==========

### 场景1：用户A预订车辆1
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-02-01",
  "end_date": "2024-02-05",
  "notes": "商务出行"
}

### 场景2：用户A基于预订创建订单
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 124,
  "pickup_location_id": 1,
  "return_location_id": 1,
  "notes": "机场接送",
  "payment_method": 2,
  "expected_total_amount": 2000.00
}

### 场景3：支付成功，更新状态为租用中
PUT {{baseUrl}}/vehicle-inventory/reservation/status
Content-Type: application/json

{
  "order_id": 1002,
  "status": "rented"
}

### 场景4：租用完成，更新状态为已完成
PUT {{baseUrl}}/vehicle-inventory/reservation/status
Content-Type: application/json

{
  "order_id": 1002,
  "status": "completed"
}

### ========== 数据验证 ==========

### 验证1：检查车辆1在2024-02-01到2024-02-05期间不可用
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-02-01",
  "end_date": "2024-02-05"
}

### 验证2：检查车辆1在其他时间段仍然可用
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-02-10",
  "end_date": "2024-02-15"
}

### ========== 预期结果说明 ==========

# 第一步预订创建应该返回：
# {
#   "code": 200,
#   "message": "预订创建成功",
#   "data": {
#     "message": "预订创建成功",
#     "reservation_id": 123
#   }
# }

# 第二步订单创建应该返回：
# {
#   "code": 200,
#   "message": "订单创建成功",
#   "data": {
#     "message": "订单创建成功",
#     "order_id": 1001,
#     "status": "待支付"
#   }
# }

# 状态更新应该返回：
# {
#   "code": 200,
#   "message": "状态更新成功",
#   "data": {
#     "message": "状态更新成功"
#   }
# }
