# 完整的预订到订单+支付宝支付流程测试

@baseUrl = http://localhost:8888
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-user-token

### ========== 第1步：检查车辆可用性 ==========

### 1. 检查车辆可用性
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20"
}

### 预期结果：车辆可用
# {
#   "code": 200,
#   "message": "检查成功",
#   "data": {
#     "is_available": true
#   }
# }

### ========== 第2步：创建预订 ==========

### 2. 创建预订（新流程）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "需要儿童座椅，希望是白色车辆"
}

### 预期结果：预订创建成功
# {
#   "code": 200,
#   "message": "预订创建成功",
#   "data": {
#     "message": "预订创建成功",
#     "reservation_id": 123
#   }
# }

### ========== 第3步：基于预订创建订单 ==========

### 3. 基于预订创建订单（包含支付宝支付链接）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "下午3点取车，需要提前准备儿童座椅",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果：订单创建成功，包含支付链接
# {
#   "code": 200,
#   "message": "订单创建成功",
#   "data": {
#     "message": "订单创建成功",
#     "order_id": 1,
#     "order_sn": "ORD1703123456",
#     "total_amount": 1500.00,
#     "payment_url": "https://openapi.alipay.com/gateway.do?...",
#     "status": "待支付"
#   }
# }

### ========== 第4步：模拟支付宝异步通知 ==========

### 4. 模拟支付宝支付成功通知
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=ORD1703123456&trade_no=2024011522001234567890&trade_status=TRADE_SUCCESS&total_amount=1500.00&gmt_payment=2024-01-15 15:30:00

### 预期结果：支付成功处理
# 返回：success

### ========== 第5步：验证订单和预订状态 ==========

### 5. 验证车辆不可用（预订已生效）
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20"
}

### 预期结果：车辆不可用
# {
#   "code": 200,
#   "message": "检查成功",
#   "data": {
#     "is_available": false
#   }
# }

### ========== 错误测试用例 ==========

### 6. 测试重复创建订单（应该失败）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "重复创建测试",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果：失败
# {
#   "code": 400,
#   "message": "该预订已创建订单"
# }

### 7. 测试无效预订ID
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 99999,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "无效预订ID测试",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果：失败
# {
#   "code": 400,
#   "message": "预订不存在"
# }

### 8. 测试未登录用户创建订单
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "未登录测试",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果：失败
# {
#   "code": 400,
#   "message": "用户ID不能为空"
# }

### ========== 完整业务流程验证 ==========

### 场景：用户A完整租车流程
# 1. 用户A登录 → 获取token
# 2. 用户A查看车辆 → 选择心仪车辆
# 3. 用户A检查可用性 → 确认可用
# 4. 用户A创建预订 → 锁定车辆
# 5. 用户A创建订单 → 获取支付链接
# 6. 用户A支付 → 支付宝回调
# 7. 系统更新状态 → 预订变为租用中
# 8. 用户A取车 → 开始使用
# 9. 用户A还车 → 完成租用

### ========== 数据库验证 ==========

# 验证点：
# 1. vehicle_inventory表：预订记录存在，order_id已关联
# 2. orders表：订单记录存在，状态为已支付
# 3. 车辆在指定时间段不可用
# 4. 支付信息正确记录

### ========== 支付宝配置说明 ==========

# 注意：当前使用的是简化的支付宝配置，实际生产环境需要：
# 1. 申请真实的支付宝应用ID
# 2. 配置正确的RSA密钥对
# 3. 设置正确的回调地址
# 4. 实现真正的RSA签名验证

# 配置文件位置：ZuLMe/Common/payment/alipay.go
# 需要修改的配置：
# - AppID: 您的支付宝应用ID
# - PrivateKey: 您的应用私钥
# - PublicKey: 支付宝公钥
# - NotifyURL: 异步通知地址
# - ReturnURL: 同步返回地址
