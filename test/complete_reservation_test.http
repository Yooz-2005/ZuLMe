# 完整的新预订流程测试

@baseUrl = http://localhost:8888

### ========== 第0步：获取用户Token ==========

### 0. 用户登录获取Token
POST {{baseUrl}}/user/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123"
}

# 请将返回的token复制到下面的变量中
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-actual-token

### ========== 第1步：检查车辆可用性 ==========

### 1. 检查车辆可用性（公开接口，无需认证）
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20"
}

### 预期结果1：
# {
#   "code": 200,
#   "message": "检查成功",
#   "data": {
#     "message": "检查成功",
#     "is_available": true
#   }
# }

### ========== 第2步：创建预订（新流程） ==========

### 2. 创建预订（新流程 - 不需要order_id）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "需要儿童座椅，希望是白色车辆"
}

### 预期结果2：
# {
#   "code": 200,
#   "message": "预订创建成功",
#   "data": {
#     "message": "预订创建成功",
#     "reservation_id": 123
#   }
# }

### ========== 第3步：验证预订效果 ==========

### 3. 再次检查同一车辆同一时间段（应该不可用）
POST {{baseUrl}}/vehicle-inventory/check-availability
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20"
}

### 预期结果3：
# {
#   "code": 200,
#   "message": "检查成功",
#   "data": {
#     "message": "检查成功",
#     "is_available": false
#   }
# }

### ========== 第4步：基于预订创建订单 ==========

### 4. 基于预订创建订单（框架测试）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "下午3点取车，需要提前准备儿童座椅",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果4：
# {
#   "code": 200,
#   "message": "订单创建成功",
#   "data": {
#     "message": "订单创建成功",
#     "order_id": 1001,
#     "status": "待支付"
#   }
# }

### ========== 第5步：错误测试 ==========

### 5. 测试重复预订（应该失败）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "重复预订测试"
}

### 预期结果5：
# {
#   "code": 500,
#   "message": "创建预订失败，车辆可能已被预订"
# }

### 6. 测试无效车辆ID
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 99999,
  "start_date": "2024-01-25",
  "end_date": "2024-01-30",
  "notes": "无效车辆ID测试"
}

### 7. 测试无效日期格式
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024/01/25",
  "end_date": "2024/01/30",
  "notes": "无效日期格式测试"
}

### 8. 测试未登录用户（应该失败）
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json

{
  "vehicle_id": 1,
  "start_date": "2024-02-01",
  "end_date": "2024-02-05",
  "notes": "未登录测试"
}

### ========== 测试说明 ==========

# 测试步骤：
# 1. 首先运行步骤0获取有效的用户token
# 2. 将token复制到@userToken变量中
# 3. 按顺序执行步骤1-8
# 4. 检查每个步骤的响应是否符合预期

# 关键验证点：
# ✅ 步骤1：车辆初始状态为可用
# ✅ 步骤2：预订创建成功，返回reservation_id
# ✅ 步骤3：预订后车辆变为不可用
# ✅ 步骤4：基于预订创建订单成功
# ✅ 步骤5-8：各种错误情况处理正确
