# 简化支付宝模拟测试

@baseUrl = http://localhost:8888
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-user-token

### ========== 完整的订单+支付流程测试 ==========

### 1. 创建预订
POST {{baseUrl}}/vehicle-inventory/reservation/create
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "vehicle_id": 1,
  "start_date": "2024-01-15",
  "end_date": "2024-01-20",
  "notes": "需要儿童座椅"
}

### 预期结果：获取 reservation_id

### 2. 基于预订创建订单（获取模拟支付链接）
POST {{baseUrl}}/order/create-from-reservation
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "reservation_id": 123,
  "pickup_location_id": 1,
  "return_location_id": 2,
  "notes": "下午3点取车",
  "payment_method": 1,
  "expected_total_amount": 1500.00
}

### 预期结果：
# {
#   "code": 200,
#   "message": "订单创建成功",
#   "data": {
#     "order_id": 1,
#     "order_sn": "ORD1703123456",
#     "total_amount": 1500.00,
#     "payment_url": "http://localhost:3000/mock-payment?order_sn=ORD1703123456&amount=1500.00&subject=租车订单-豪华轿车&app_id=9021000142691060",
#     "status": "待支付"
#   }
# }

### 3. 模拟支付成功（手动触发支付宝回调）
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=ORD1703123456&trade_no=MOCK1703123456&trade_status=TRADE_SUCCESS&total_amount=1500.00&gmt_payment=2024-01-15 15:30:00

### 预期结果：success

### 4. 验证订单状态（应该已支付）
GET {{baseUrl}}/order/detail/1
Authorization: Bearer {{userToken}}

### 预期结果：订单状态为"已支付"

### ========== 前端模拟支付页面说明 ==========

# 当用户点击支付链接时，会跳转到：
# http://localhost:3000/mock-payment?order_sn=ORD1703123456&amount=1500.00&subject=租车订单-豪华轿车&app_id=9021000142691060

# 前端可以创建一个模拟支付页面，显示：
# - 订单号：ORD1703123456
# - 支付金额：1500.00元
# - 商品描述：租车订单-豪华轿车
# - 应用ID：9021000142691060

# 用户点击"确认支付"按钮后，前端可以：
# 1. 调用后端的支付宝回调接口模拟支付成功
# 2. 跳转到支付成功页面

### ========== 模拟支付成功的JavaScript代码 ==========

# 前端可以使用以下代码模拟支付成功：

/*
// 获取URL参数
const urlParams = new URLSearchParams(window.location.search);
const orderSn = urlParams.get('order_sn');
const amount = urlParams.get('amount');

// 模拟支付成功
function mockPaymentSuccess() {
    const formData = new FormData();
    formData.append('out_trade_no', orderSn);
    formData.append('trade_no', 'MOCK' + Date.now());
    formData.append('trade_status', 'TRADE_SUCCESS');
    formData.append('total_amount', amount);
    formData.append('gmt_payment', new Date().toISOString().slice(0, 19).replace('T', ' '));

    fetch('http://localhost:8888/payment/alipay/notify', {
        method: 'POST',
        body: formData
    })
    .then(response => response.text())
    .then(result => {
        if (result === 'success') {
            // 跳转到支付成功页面
            window.location.href = 'http://localhost:3000/payment/success?order_sn=' + orderSn;
        }
    });
}
*/

### ========== 测试不同的支付状态 ==========

### 5. 模拟支付失败
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=ORD1703123456&trade_no=MOCK1703123456&trade_status=TRADE_CLOSED&total_amount=1500.00&gmt_payment=2024-01-15 15:30:00

### 6. 模拟支付取消
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=ORD1703123456&trade_no=MOCK1703123456&trade_status=TRADE_FINISHED&total_amount=1500.00&gmt_payment=2024-01-15 15:30:00

### ========== 错误测试 ==========

### 7. 无效的订单号
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=INVALID_ORDER&trade_no=MOCK1703123456&trade_status=TRADE_SUCCESS&total_amount=1500.00&gmt_payment=2024-01-15 15:30:00

### 预期结果：500 Internal Server Error

### 8. 缺少必要参数
POST {{baseUrl}}/payment/alipay/notify
Content-Type: application/x-www-form-urlencoded

out_trade_no=ORD1703123456&trade_status=TRADE_SUCCESS

### 预期结果：400 Bad Request

### ========== 支付宝配置说明 ==========

# 当前配置（位于 ZuLMe/Common/payment/alipay.go）：
# - AppID: 9021000142691060 （您的真实应用ID）
# - NotifyURL: http://7651f135.r27.cpolar.top/payment/alipay/notify （您的回调地址）
# - ReturnURL: http://localhost:3000/payment/success （前端成功页面）

# 模拟支付链接格式：
# http://localhost:3000/mock-payment?order_sn={订单号}&amount={金额}&subject={商品描述}&app_id={应用ID}

### ========== 生产环境升级说明 ==========

# 要升级到真实的支付宝支付，需要：
# 1. 申请支付宝开放平台账号
# 2. 创建应用并获取应用私钥和支付宝公钥
# 3. 配置RSA签名验证
# 4. 使用支付宝官方SDK
# 5. 修改CreatePaymentURL方法调用真实的支付宝API

# 当前的模拟版本适合：
# - 开发阶段测试
# - 演示系统功能
# - 前后端联调
# - 业务逻辑验证
